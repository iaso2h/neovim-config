{
    "main": {
        "prefix": ["main"],
        "body": [
            "int main()",
            "{",
            "\t${0}",
            "}"
        ],
        "description": "main function"
    },
    "forc": {
        "prefix": ["forc"],
        "body": [
            "for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split(\"[^\\w]\",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\\.|->)begin\\(\\)|((?:std|boost)::)?begin\\((.*)\\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else \"\") + \"end(\" + m.group(4) + \")\") if m.group(4) else (m.group(1) + m.group(2) + \"end()\")) if m else \"\"`}; ${5:++`!p snip.rv = t[1].split(\" \")[-1]`}) {",
            "\t${VISUAL}$0",
            "}"
        ],
        "description": "general for loop (for)"
    },
    "beginend": {
        "prefix": ["beginend"],
        "body": [
            "${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()"
        ],
        "description": "$1.begin(), $1.end() (beginend)"
    },
    "cl": {
        "prefix": ["cl"],
        "body": [
            "class ${1:`!p snip.rv = snip.basename or \"name\"`}",
            "{",
            "public:",
            "\t${1/(\\w+).*/$1/} (${2:arguments});",
            "\tvirtual ~${1/(\\w+).*/$1/} ();",
            "",
            "private:",
            "\t${0:/* data */}",
            "};"
        ],
        "description": "class .. (class)"
    },
    "ns": {
        "prefix": ["ns"],
        "body": [
            "namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or \"name\"`}",
            "{",
            "\t${VISUAL}$0",
            "}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}"
        ],
        "description": "namespace .. (namespace)"
    },
    "readfile": {
        "prefix": ["readfile"],
        "body": [
            "std::vector<char> v;",
            "if (FILE *fp = fopen(${1:\"filename\"}, \"r\"))",
            "{",
            "\tchar buf[1024];",
            "\twhile(size_t len = fread(buf, 1, sizeof(buf), fp))",
            "\t\tv.insert(v.end(), buf, buf + len);",
            "fclose(fp);",
            "}"
        ],
        "description": "read file (readF)"
    },
    "map": {
        "prefix": ["map"],
        "body": [
            "std::map<${1:key}, ${2:value}> map$0;"
        ],
        "description": "std::map (map)"
    },
    "vector": {
        "prefix": ["vector"],
        "body": [
            "std::vector<${1:char}> v$0;"
        ],
        "description": "std::vector (v)"
    },
    "tp": {
        "prefix": ["tp"],
        "body": [
            "template <typename ${1:_InputIter}>"
        ],
        "description": "template <typename ..> (template)"
    },
    "cla": {
        "prefix": ["cla"],
        "body": [
            "#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\\U&\\E','')`}",
            "#define $2",
            "",
            "class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\\u&',''), '_\\(\\w\\)', '\\u\\1', 'g')`}",
            "{",
            "private:",
            "\t$3",
            "",
            "public:",
            "\t$1();",
            "\tvirtual ~$1();",
            "};",
            "",
            "#endif /* $2 */"
        ],
        "description": "An entire .h generator"
    },
    "fnc": {
        "prefix": ["fnc"],
        "body": [
            "/**",
            "* @brief: ${4:brief}",
            "*",
            "* @param: `!p write_docstring_args(t[3],snip)`",
            "*",
            "* @return: `!p snip.rv = t[1]`",
            "*/",
            "${1:ReturnType} ${2:FunctionName}(${3:param})",
            "{",
            "\t${0:FunctionBody}",
            "}"
        ],
        "description": "Basic c++ doxygen function template"
    },
    "boost_test": {
        "prefix": ["boost_test"],
        "body": [
            "#define BOOST_TEST_MODULE ${1:TestModuleName}",
            "#include <boost/test/included/unit_test.hpp>",
            "",
            "BOOST_AUTO_TEST_CASE(${2:TestCaseName})",
            "{",
            "\t${0:TestDefinition}",
            "}",
            ""
        ],
        "description": "Boost test module"
    },
    "boost_suite": {
        "prefix": ["boost_suite"],
        "body": [
            "#define BOOST_TEST_MODULE ${1:TestModuleName}",
            "#include <boost/test/included/unit_test.hpp>",
            "",
            "BOOST_AUTO_TEST_SUITE(${2:SuiteName})",
            "",
            "BOOST_AUTO_TEST_CASE(${3:TestCaseName})",
            "{",
            "\t${0:TestDefinition}",
            "}",
            "",
            "BOOST_AUTO_TEST_SUITE_END()",
            ""
        ],
        "description": "Boost test suite module"
    },
    "boost_test_fixture": {
        "prefix": ["boost_test_fixture"],
        "body": [
            "#define BOOST_TEST_MODULE ${1:TestModuleName}",
            "#include <boost/test/included/unit_test.hpp>",
            "",
            "struct ${2:FixtureName} {",
            "\t$2() {}",
            "\tvirtual ~$2() {}",
            "\t/* define members here */",
            "};",
            "",
            "BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)",
            "{",
            "\t${0:TestDefinition}",
            "}",
            ""
        ],
        "description": "Boost test module with fixture"
    },
    "boost_suite_fixture": {
        "prefix": ["boost_suite_fixture"],
        "body": [
            "#define BOOST_TEST_MODULE ${1:TestModuleName}",
            "#include <boost/test/included/unit_test.hpp>",
            "",
            "struct ${2:FixtureName} {",
            "\t$2() {}",
            "\tvirtual ~$2() {}",
            "\t/* define members here */",
            "};",
            "",
            "BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)",
            "",
            "BOOST_AUTO_TEST_CASE(${4:TestCaseName})",
            "{",
            "\t${0:TestDefinition}",
            "}",
            "",
            "BOOST_AUTO_TEST_SUITE_END()",
            ""
        ],
        "description": "Boost test suite with fixture"
    }
}

