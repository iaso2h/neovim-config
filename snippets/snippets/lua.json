{
    "vimhead": {
        "prefix": "vimhead",
        "body": [
            "local fn  = vim.fn",
            "local cmd = vim.cmd",
            "local api = vim.api",
            "local M   = {}",
            ""
        ],
        "description": "vim head local variables"
    },
    "#!": {
        "prefix": [
            "#!"
        ],
        "body": [
            "#!/usr/bin/env lua",
            "$0"
        ],
        "description": "#!/usr/bin/env lua"
    },
    "return": {
        "prefix": "rt",
        "body": ["return $0"],
        "description": "return value"
    },
    "vimecho": {
        "prefix": "vimecho",
        "body": [
            "api.nvim_echo({{\"${1:text}\", \"${2:Normal}\"}}, ${3:true}, {})"
        ],
        "description": "Echo message using vim.api.nvim_echo()"
    },
    "vimconfirm": {
        "prefix": "vimconfirm",
        "body": [
            "cmd \"echohl ${1:MoreMsg}\"",
            "local answer = fn.confirm(\"${2:Save modification?}\",",
            "\t\">>> &Save\n&Discard\n&Cancel",
            3,
            "Question\")",
            "cmd \"echohl None\""
        ],
        "description": "vim confirm() in lua"
    },
    "do return": {
        "prefix": "dor",
        "body": [
            "do return end"
        ],
        "description": "do return end"
    },
    "vimpcall": {
        "prefix": "pcallv",
        "body": [
            "local ok, msg = pcall(${1:func}, ${2:args})",
            "${3:if not ok then vim.notify(msg, vim.log.levels.ERROR)} end",
            "${4:\thandler(ok, err)\nelse\n\tsuccess(ok, err)\nend}"
        ],
        "description": "pcall statement"
    }
}
