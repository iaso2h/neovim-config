local api = vim.api
local lineCount = vim.fn.line('$')
local bufNr = vim.api.nvim_get_current_buf()
local qfCount   = #vim.fn.getqflist()
if lineCount ~= qfCount then
    -- Mapping for quickfix items that generated by gO in help docs

    -- Bring back the original <CR>
    bmap(bufNr, "n", [[<CR>]], [[<CR><CMD>lua require("buf").quickfixToggle()<CR>]],
        {"noremap", "silent"}, "which_key_ignore")
    bmap(bufNr, "n", [[o]],    [[<CR>]],
        {"noremap", "silent"}, "which_key_ignore")

    bmap(bufNr, "n", [[K]], [[<Nop>]], "which_key_ignore")

    bmap(bufNr, "n", [[q]], [[<CMD>q<CR>]], {"silent"}, "Close quickfix")
else
    bmap(bufNr, "n", [[<CR>]], [[:lua require("quickfix.cc").main(false, true)<CR>]], {"silent"}, "Preview current item in quickfix")
    bmap(bufNr, "n", [[o]],    [[:lua require("quickfix.cc").main(true, true)<CR>]],  {"silent"}, "Open current item in quickfix")

    bmap(bufNr, "n", [[q]], [[:lua vim.cmd"cclose";require("quickfix.highlight").clear()<CR>]], {"silent"}, "Close quickfix")
    bmap(bufNr, "n", [[Q]], [[:lua vim.cmd"cclose";require("quickfix.highlight").clear()<CR>]], {"silent"}, "Close quickfix")

    -- Showing floating info
    bmap(bufNr, "n", [[K]], [[<CMD>lua require("quickfix.info").hover()<CR>]], {"silent"}, "Show quickfix item info")
    api.nvim_create_autocmd({
        "CursorMoved",
        -- Neovim will enter relative buffer temporarily, so "BufLeave" will allways
        -- trigger then destroy the brand new float window and buffer within
        "WinLeave",
        "TabLeave",
        "ModeChanged",
    }, {
        buffer = bufNr,
        desc = "Close floating win inside quickfix when cursor moves",
        callback = require("quickfix.info").closeFloatWin,
    })
end

bmap(bufNr, "n", [[<leader>H]], [[<CMD>lua require("quickfix.highlight").clear()<CR>]], {"silent"}, "Clear known quickfix highlight")
bmap(bufNr, "n", [[<C-n>]], [[j<CMD>lua require("quickfix.cc").main(false, true)<CR>]], {"noremap", "silent"}, "Next item on quickfix")
bmap(bufNr, "n", [[<C-p>]], [[k<CMD>lua require("quickfix.cc").main(false, true)<CR>]], {"noremap", "silent"}, "Previous item on quickfix")

bmap(bufNr, "n", [[<C-f>]], [[:Cfilter ]],          {"nowait"}, "Filter in quickfix")
bmap(bufNr, "n", [[%]],     [[<CMD>Cfilter %<CR>]], {"silent"}, "Filter other buffer in quickfix")
bmap(bufNr, "n", [[#]],     [[<CMD>Cfilter #<CR>]], {"silent"}, "Filter other buffer in quickfix")

bmap(bufNr, "n", [[d]], [[<Nop>]], "which_key_ignore")
bmap(bufNr, "x", [[d]],  [[:lua require("quickfix.undo").delete("v")<CR>]],    {"silent"}, "Delete selected quickfix items")
bmap(bufNr, "n", [[dd]], [[:lua require("quickfix.undo").delete("n")<CR>]],    {"silent"}, "Delete quickfix item")
bmap(bufNr, "n", [[u]],  [[<CMD>lua require("quickfix.undo").recovery()<CR>]], {"silent"}, "Recovery quickfix items")

api.nvim_win_set_option(0, "number", true)
api.nvim_win_set_option(0, "relativenumber", false)
api.nvim_win_set_option(0, "signcolumn", "no")
api.nvim_win_set_option(0, "foldcolumn", "0")
api.nvim_buf_set_option(bufNr, "buflisted", false)

vim.cmd [[setlocal winhighlight=Normal:PanelBackground,SignColumn:PanelBackground]]
vim.cmd [[resize 21]]
